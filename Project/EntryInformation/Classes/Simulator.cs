//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using EntryInformation;
using System.Drawing;
using EntryInformation.Classes;


public class Simulator 
{
    private Grid grid;
    private Simulation simulation;
    private List<PictureBox> pictureBoxCrossing;

    public Simulator(Simulation simulation)
    {
        this.simulation = simulation;
        simulation.gridGroupBox.Enabled = false;
        pictureBoxCrossing = new List<PictureBox>();
    }

    public void calculatePanelSize(int nrOfRows, int nrOfColumns)
    {
        int height = nrOfRows * 200;
        int width = nrOfColumns * 200;
        simulation.gridPanel.Size = new Size(width, height);
        simulation.gridGroupBox.Size = new Size(width + 15, height + 30);
    }

    public void DrawGrid()
    {

        grid = new Grid();
        simulation.gridPanel.Controls.Clear();
        simulation.gridGroupBox.Enabled = true;
        grid.nrOfRows = Convert.ToInt16(simulation.comboBoxRows.SelectedItem);
        grid.nrOfColumns = Convert.ToInt16(simulation.comboBoxColumns.SelectedItem);

        calculatePanelSize(grid.nrOfRows, grid.nrOfColumns);
        Pen myPen;
        myPen = new Pen(Color.White);
        Graphics formGraphics = simulation.gridPanel.CreateGraphics();

        //drawing cells rows
        foreach (var item in grid.ReturnGridCells())
        {
            formGraphics.DrawLine(myPen, item.ReturnLocation().X, item.ReturnLocation().Y, (item.ReturnLocation().X + 200), item.ReturnLocation().Y);//top line from the left to right
            formGraphics.DrawLine(myPen, item.ReturnLocation().X, item.ReturnLocation().Y, item.ReturnLocation().X, (item.ReturnLocation().Y + 200));//left line from top to bottom
            formGraphics.DrawLine(myPen, item.ReturnLocation().X, (item.ReturnLocation().Y + 199), (item.ReturnLocation().X + 200), item.ReturnLocation().Y + 199);//bottom line from the left to right
            formGraphics.DrawLine(myPen, (item.ReturnLocation().X + 199), item.ReturnLocation().Y, (item.ReturnLocation().X + 199), (item.ReturnLocation().Y + 200));//right line from top to bottom
        }

        myPen.Dispose();
        formGraphics.Dispose();
    }

    private GridCell determinePicboxLocation(Point droppedCoordinates)
    {
        List<GridCell> gridCells = grid.ReturnGridCells();

        if (grid.GridCellsOccupied() != 12)//if all cells are occupied
        {
            GridCell GridCellToBeDropped = null;

            List<GridCell> gridCellsUpdated = new List<GridCell>();//possible X coordinate cells candidates //change name to gridcellsUpdated

            foreach (var item in gridCells)
            {
                if ((droppedCoordinates.X >= item.ReturnLocation().X && droppedCoordinates.X <= (item.ReturnLocation().X + 200)) && item.Crossing == null)
                {
                    gridCellsUpdated.Add(item);
                }

            }
            foreach (var item in gridCellsUpdated)
            {
                if (droppedCoordinates.Y >= item.ReturnLocation().Y && droppedCoordinates.Y <= (item.ReturnLocation().Y + 200))
                {
                    GridCellToBeDropped = item;
                    break;
                }
            }

            if (GridCellToBeDropped != null)
                return GridCellToBeDropped;

            gridCellsUpdated = new List<GridCell>();
            GridCell cellOccupied = null;//which cell user dropped crossing is occupied
            List<GridCell> randomCellsToChoose = new List<GridCell>();//Possible cells to choose from

            foreach (var item in gridCells)//check if below you there are empty spots and check if is in cell
            {
                if ((droppedCoordinates.X >= item.ReturnLocation().X && droppedCoordinates.X <= (item.ReturnLocation().X + 200)) && item.Crossing != null)
                {
                    gridCellsUpdated.Add(item);
                }

            }

            foreach (var item in gridCellsUpdated)
            {
                if (droppedCoordinates.Y >= item.ReturnLocation().Y && droppedCoordinates.Y <= (item.ReturnLocation().Y + 200))
                {
                    cellOccupied = item;
                    break;
                }
            }

            foreach (var item in gridCells)//check if there is are emtpy spots
            {
                if (((cellOccupied.ReturnLocation().X + 200) == item.ReturnLocation().X && cellOccupied.ReturnLocation().Y == item.ReturnLocation().Y) && item.Crossing == null)
                {
                    randomCellsToChoose.Add(item);
                }
                else if (((cellOccupied.ReturnLocation().X - 200) == item.ReturnLocation().X && cellOccupied.ReturnLocation().Y == item.ReturnLocation().Y) && item.Crossing == null)
                {
                    randomCellsToChoose.Add(item);
                }
                else if (((cellOccupied.ReturnLocation().Y + 200) == item.ReturnLocation().Y && cellOccupied.ReturnLocation().X == item.ReturnLocation().X) && item.Crossing == null)
                {
                    randomCellsToChoose.Add(item);
                }
                else if (((cellOccupied.ReturnLocation().Y - 200) == item.ReturnLocation().Y && cellOccupied.ReturnLocation().X == item.ReturnLocation().X) && item.Crossing == null)
                {
                    randomCellsToChoose.Add(item);
                }
            }

            if (randomCellsToChoose.Count != 0)
            {
                Random random = new Random();

                int randomChoice = random.Next(0, randomCellsToChoose.Count);
                while (randomCellsToChoose[randomChoice] == null)
                {
                    randomChoice = random.Next(0, randomCellsToChoose.Count);
                }
                return randomCellsToChoose[randomChoice];
            }
        }

        return null;
    }

    public void LinkCrossingsWithNeighbors()
    {
        if (grid.CheckGridFull())
        {
            List<GridCell> gridCells = grid.ReturnGridCells();
            foreach (var item in gridCells)//check if there is are emtpy spots
            {
                foreach (var item2 in gridCells)
                {
                    if (((item.ReturnLocation().X + 200) == item2.ReturnLocation().X && item.ReturnLocation().Y == item2.ReturnLocation().Y))
                    {
                        item.Crossing.neighbors.Right = item2.Crossing;
                    }
                    else if (((item.ReturnLocation().X - 200) == item2.ReturnLocation().X && item.ReturnLocation().Y == item2.ReturnLocation().Y))
                    {
                        item.Crossing.neighbors.Left = item2.Crossing;
                    }
                    else if (((item.ReturnLocation().Y + 200) == item2.ReturnLocation().Y && item.ReturnLocation().X == item2.ReturnLocation().X))
                    {
                        item.Crossing.neighbors.Bottom = item2.Crossing;
                    }
                    else if (((item.ReturnLocation().Y - 200) == item2.ReturnLocation().Y && item.ReturnLocation().X == item2.ReturnLocation().X))
                    {
                        item.Crossing.neighbors.Top = item2.Crossing;
                    }
                }
            }
        }
        else
            throw new Exception("Grid is not full");
    }

    public bool AddCrossingInCell(DragEventArgs e)
    {
        GridCell OnGridCellDropped = determinePicboxLocation(simulation.gridPanel.PointToClient(new Point(e.X, e.Y)));
        if (OnGridCellDropped != null)
        {
            PictureBox picbox = new PictureBox();
            picbox.Click += new EventHandler(simulation.FormExpand);
            picbox.MouseMove += picbox_MouseMove;
            picbox.Size = new Size(200, 200);
            picbox.BorderStyle = BorderStyle.None;
            picbox.Name = Convert.ToString(OnGridCellDropped.Number);
            picbox.Location = new Point(OnGridCellDropped.ReturnLocation().X, OnGridCellDropped.ReturnLocation().Y);

            Bitmap image = (Bitmap)e.Data.GetData(DataFormats.Bitmap);
            picbox.Image = image;
            picbox.SizeMode = PictureBoxSizeMode.StretchImage;
            simulation.gridPanel.Controls.Add(picbox);
            pictureBoxCrossing.Add(picbox);
            LinkCrossingAndGridCell(OnGridCellDropped, image);
            return true;
        }
        else
            return false;
    }

    public void InvalidateCrossings()
    {
        foreach (var item in pictureBoxCrossing)
        {
            item.Invalidate();
        }
    }

    public void LinkPaintEventHandlerToCrossing()
    {
        foreach (var item in pictureBoxCrossing)
        {
            item.Paint += toDrawOn_Paint;
        }
    }

    public void StartTimerTrafficLight()
    {
        foreach (var item in grid.ReturnGridCells())
        {
            item.Crossing.Feeders[0].TrafficLight.greenLightTimer.Start();
        }
    }

    void toDrawOn_Paint(object sender, PaintEventArgs e)
    {
        Crossing crossingTest = (grid.ReturnGridCells().Find(x => x.Number == Convert.ToInt16(((PictureBox)sender).Name))).Crossing;

        Feeder TrafficLightGreenFeeder = null;

        int freeSpotLaneIndex = -1;
        Feeder feederSpotLane = null;
        Direction direction = Direction.None;

        foreach (var item in crossingTest.Feeders)
        {
            if (item.TrafficLight.greenLightTimer.Enabled)
            {
                TrafficLightGreenFeeder = item;
                direction = TrafficLightGreenFeeder.ReturnDirection();
                break;
            }
        }

        if (TrafficLightGreenFeeder != null)
        {

            switch (TrafficLightGreenFeeder.FeederID)
            {
                case 1:
                    switch (direction)
                    {
                        case Direction.Straight:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[2].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[2];
                            break;
                        case Direction.Left:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[1].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[1];
                            break;
                        case Direction.Right:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[3].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[3];
                            break;
                    }
                    break;
                case 2:
                    switch (direction)
                    {
                        case Direction.Straight:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[3].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[3];
                            break;
                        case Direction.Left:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[2].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[2];
                            break;
                        case Direction.Right:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[0].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[0];
                            break;
                    }
                    break;
                case 3:
                    switch (direction)
                    {
                        case Direction.Straight:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[0].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[0];
                            break;
                        case Direction.Left:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[3].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[3];
                            break;
                        case Direction.Right:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[1].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[1];
                            break;
                    }
                    break;
                case 4:
                    switch (direction)
                    {
                        case Direction.Straight:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[1].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[1];
                            break;
                        case Direction.Left:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[0].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[0];
                            break;
                        case Direction.Right:
                            freeSpotLaneIndex = Array.IndexOf(crossingTest.Feeders[2].CarsComingIn, null);
                            feederSpotLane = crossingTest.Feeders[2];
                            break;
                    }
                    break;
            }


            if (TrafficLightGreenFeeder.CarsGoingOut[4] == null)
            {
                for (int i = 0; i < TrafficLightGreenFeeder.TotalCars.Length; i++)
                {
                    if (TrafficLightGreenFeeder.TotalCars[i] != null)
                    {
                        TrafficLightGreenFeeder.CarsGoingOut[4] = TrafficLightGreenFeeder.TotalCars[i];
                        TrafficLightGreenFeeder.TotalCars[i] = null;
                        break;
                    }
                }
            }


            for (int i = 0; i < TrafficLightGreenFeeder.CarsGoingOut.Length; i++)
            {
                if (TrafficLightGreenFeeder.CarsGoingOut[i] != null)
                {
                    int pointToCheck = -1000;
                    int pointToCompare = -1000;

                    switch (TrafficLightGreenFeeder.FeederID)
                    {
                        case 1:
                            pointToCheck = TrafficLightGreenFeeder.CarsGoingOut[i].X;
                            pointToCompare = TrafficLightGreenFeeder.StopPointsGoingOut[i].X;
                            if (pointToCheck == 197)
                            {
                                TrafficLightGreenFeeder.CarsGoingOut[i].X = -3;
                                pointToCheck = -3;
                            }
                            break;
                        case 2:
                            pointToCheck = TrafficLightGreenFeeder.CarsGoingOut[i].Y;
                            pointToCompare = TrafficLightGreenFeeder.StopPointsGoingOut[i].Y;
                            break;
                        case 3:
                            pointToCheck = TrafficLightGreenFeeder.CarsGoingOut[i].X;
                            pointToCompare = TrafficLightGreenFeeder.StopPointsGoingOut[i].X;
                            break;
                        case 4:
                            pointToCheck = TrafficLightGreenFeeder.CarsGoingOut[i].Y;
                            pointToCompare = TrafficLightGreenFeeder.StopPointsGoingOut[i].Y;
                            break;
                    }

                    if (pointToCheck == pointToCompare)
                    {
                        if (i == 0)//if car is at stoplight
                        {
                            //Direction chosenDirection = TrafficLightGreenFeeder.ReturnDirection();
                            //while (chosenDirection != Direction.Straight)//this for now
                            {
                                //    chosenDirection = TrafficLightGreenFeeder.ReturnDirection();
                            }


                            if (freeSpotLaneIndex != -1)
                            {
                                TrafficLightGreenFeeder.CarsGoingOut[i].Direction = direction;
                                e.Graphics.FillEllipse(Brushes.Blue, TrafficLightGreenFeeder.CarsGoingOut[i].X, TrafficLightGreenFeeder.CarsGoingOut[i].Y, 5, 5);
                                switch (TrafficLightGreenFeeder.FeederID)
                                {
                                    case 1:
                                        TrafficLightGreenFeeder.CarsGoingOut[i].X++;
                                        break;
                                    case 2:
                                        TrafficLightGreenFeeder.CarsGoingOut[i].Y++;
                                        break;
                                    case 3:
                                        TrafficLightGreenFeeder.CarsGoingOut[i].X++;
                                        break;
                                    case 4:
                                        TrafficLightGreenFeeder.CarsGoingOut[i].Y++;
                                        break;
                                }
                                feederSpotLane.CarsComingIn[freeSpotLaneIndex] = TrafficLightGreenFeeder.CarsGoingOut[i];
                                TrafficLightGreenFeeder.CarsGoingOut[i] = null;
                            }
                            else
                                e.Graphics.FillEllipse(Brushes.Blue, TrafficLightGreenFeeder.CarsGoingOut[i].X, TrafficLightGreenFeeder.CarsGoingOut[i].Y, 5, 5);
                        }
                        else
                        {
                            if (TrafficLightGreenFeeder.CarsGoingOut[i - 1] == null)
                            {
                                e.Graphics.FillEllipse(Brushes.Blue, TrafficLightGreenFeeder.CarsGoingOut[i].X, TrafficLightGreenFeeder.CarsGoingOut[i].Y, 5, 5);

                                switch (TrafficLightGreenFeeder.FeederID)
                                {
                                    case 1:
                                        TrafficLightGreenFeeder.CarsGoingOut[i].X++;
                                        break;
                                    case 2:
                                        TrafficLightGreenFeeder.CarsGoingOut[i].Y++;
                                        break;
                                    case 3:
                                        TrafficLightGreenFeeder.CarsGoingOut[i].X++;
                                        break;
                                    case 4:
                                        TrafficLightGreenFeeder.CarsGoingOut[i].Y++;
                                        break;
                                }

                                TrafficLightGreenFeeder.CarsGoingOut[i - 1] = TrafficLightGreenFeeder.CarsGoingOut[i];
                                TrafficLightGreenFeeder.CarsGoingOut[i] = null;
                                //insinsi
                            }
                            else
                            {
                                e.Graphics.FillEllipse(Brushes.Blue, TrafficLightGreenFeeder.CarsGoingOut[i].X, TrafficLightGreenFeeder.CarsGoingOut[i].Y, 5, 5);
                            }
                        }
                    }
                    else
                    {
                        switch (TrafficLightGreenFeeder.FeederID)
                        {
                            case 1:
                                e.Graphics.FillEllipse(Brushes.Blue, TrafficLightGreenFeeder.CarsGoingOut[i].X, TrafficLightGreenFeeder.CarsGoingOut[i].Y, 5, 5);
                                TrafficLightGreenFeeder.CarsGoingOut[i].X++;
                                break;
                            case 2:
                                e.Graphics.FillEllipse(Brushes.Blue, TrafficLightGreenFeeder.CarsGoingOut[i].X, TrafficLightGreenFeeder.CarsGoingOut[i].Y, 5, 5);
                                TrafficLightGreenFeeder.CarsGoingOut[i].Y++;
                                break;
                            case 3:
                                e.Graphics.FillEllipse(Brushes.Blue, TrafficLightGreenFeeder.CarsGoingOut[i].X, TrafficLightGreenFeeder.CarsGoingOut[i].Y, 5, 5);
                                TrafficLightGreenFeeder.CarsGoingOut[i].X--;
                                break;
                            case 4:
                                e.Graphics.FillEllipse(Brushes.Blue, TrafficLightGreenFeeder.CarsGoingOut[i].X, TrafficLightGreenFeeder.CarsGoingOut[i].Y, 5, 5);
                                TrafficLightGreenFeeder.CarsGoingOut[i].Y--;
                                break;
                        }
                    }
                }
            }
        }
        //calculate if the neighbors crossing feeder has an open spot and if there is no neighbor then the car is going out of the simulation

        //int freeSpotFoundIndex = -1;

        //foreach (var item in crossingTest.neighbors.Right.Feeders[0].CarsGoingOut)
        {
            //freeSpotFoundIndex = Array.IndexOf(crossingTest.neighbors.Right.Feeders[0].CarsGoingOut, null);
        }

        foreach (var item in crossingTest.Feeders)
        {
            switch (item.FeederID)
            {
                case 1:
                    for (int i = 0; i < item.CarsComingIn.Length; i++)
                    {
                        if (item.CarsComingIn[i] != null)
                        {
                            switch (item.CarsComingIn[i].Direction)
                            {
                                case Direction.Left:
                                    if (item.CarsComingIn[i].Y == 82)
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Direction = Direction.Straight;
                                        item.CarsComingIn[i].X--;
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Y--;
                                    }
                                    break;
                                case Direction.Straight:
                                    if (item.CarsComingIn[i].X == item.StopPointsComingIn[i].X)
                                    {
                                        if (i == 0)//is at border
                                        {
                                            if (false)
                                            {

                                            }
                                            else
                                            {
                                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                            }
                                        }
                                        else
                                        {
                                            if (item.CarsComingIn[i - 1] == null)
                                            {
                                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                                item.CarsComingIn[i - 1] = item.CarsComingIn[i];
                                                item.CarsComingIn[i] = null;
                                            }
                                            else
                                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        }
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].X--;
                                    }
                                    break;
                                case Direction.Right:
                                    if (item.CarsComingIn[i].Y == 82)
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Direction = Direction.Straight;
                                        item.CarsComingIn[i].X--;
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Y++;
                                    }
                                    break;
                            }
                        }
                    }
                    break;
                case 2:
                    for (int i = 0; i < item.CarsComingIn.Length; i++)
                    {
                        if (item.CarsComingIn[i] != null)
                        {
                            switch (item.CarsComingIn[i].Direction)
                            {
                                case Direction.Left:
                                    if (item.CarsComingIn[i].X == 112)
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Direction = Direction.Straight;
                                        item.CarsComingIn[i].Y--;
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].X++;
                                    }
                                    break;
                                case Direction.Straight:
                                    if (item.CarsComingIn[i].Y == item.StopPointsComingIn[i].Y)
                                    {
                                        if (i == 0)//is at border
                                        {
                                            if (false)
                                            {

                                            }
                                            else
                                            {
                                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                            }
                                        }
                                        else
                                        {
                                            if (item.CarsComingIn[i - 1] == null)
                                            {
                                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                                item.CarsComingIn[i - 1] = item.CarsComingIn[i];
                                                item.CarsComingIn[i] = null;
                                            }
                                            else
                                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        }
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Y--;
                                    }
                                    break;
                                case Direction.Right:
                                    if (item.CarsComingIn[i].X == 112)
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Direction = Direction.Straight;
                                        item.CarsComingIn[i].Y--;
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].X--;
                                    }
                                    break;
                            }
                        }
                    }
                    break;
                case 3:
                    for (int i = 0; i < item.CarsComingIn.Length; i++)
                    {
                        if (item.CarsComingIn[i] != null)
                        {
                            switch (item.CarsComingIn[i].Direction)
                            {
                                case Direction.Left:
                                    if (item.CarsComingIn[i].Y == 112)
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Direction = Direction.Straight;
                                        item.CarsComingIn[i].X++;
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Y++;
                                    }
                                    break;
                                case Direction.Straight:
                                    if (item.CarsComingIn[i].X == item.StopPointsComingIn[i].X || (item.CarsComingIn[i].X == 196 && i == 0) || (item.CarsComingIn[i].X == 199 && i == 0 && crossingTest.neighbors.Right == null))
                                    {
                                        if (i == 0)//is at border
                                        {
                                            if (crossingTest.neighbors.Right != null)//
                                            {
                                                if (crossingTest.neighbors.Right.Feeders[0].CarsGoingOut[4] == null)
                                                {
                                                    if (item.CarsComingIn[i].X == 196)
                                                    {
                                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                                        item.CarsComingIn[i].X++;
                                                        crossingTest.neighbors.Right.Feeders[0].CarsGoingOut[4] = item.CarsComingIn[i];
                                                        item.CarsComingIn[i] = item.CarsComingIn[i+1];
                                                        item.CarsComingIn[i + 1] = item.CarsComingIn[i + 2];
                                                        item.CarsComingIn[i+2] = item.CarsComingIn[i + 3];
                                                        item.CarsComingIn[i + 3] = item.CarsComingIn[i + 4];
                                                        item.CarsComingIn[i+4] = null;
                                                    }
                                                    else
                                                    {
                                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                                        item.CarsComingIn[i].X++;
                                                    }
                                                }
                                                else
                                                {
                                                    e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                                }
                                            }
                                            else
                                            {
                                                if (item.CarsComingIn[i].X == 199)
                                                {
                                                    e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                                    item.CarsComingIn[i].X++;
                                                    item.CarsComingIn[i] = item.CarsComingIn[i + 1];
                                                    item.CarsComingIn[i + 1] = item.CarsComingIn[i + 2];
                                                    item.CarsComingIn[i + 2] = item.CarsComingIn[i + 3];
                                                    item.CarsComingIn[i + 3] = item.CarsComingIn[i + 4];
                                                    item.CarsComingIn[i + 4] = null;
                                                }
                                                else
                                                {
                                                    e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                                    item.CarsComingIn[i].X++;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (item.CarsComingIn[i - 1] == null)
                                            {
                                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                                item.CarsComingIn[i - 1] = item.CarsComingIn[i];
                                                item.CarsComingIn[i] = null;
                                            }
                                            else
                                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        }
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].X++;
                                    }
                                    break;
                                case Direction.Right:
                                    if (item.CarsComingIn[i].Y == 112)
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Direction = Direction.Straight;
                                        item.CarsComingIn[i].X++;
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Y--;
                                    }
                                    break;
                            }
                        }
                    }
                    break;
                case 4:
                    for (int i = 0; i < item.CarsComingIn.Length; i++)
                    {
                        if (item.CarsComingIn[i] != null)
                        {
                            switch (item.CarsComingIn[i].Direction)
                            {
                                case Direction.Left:
                                    if (item.CarsComingIn[i].X == 82)
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Direction = Direction.Straight;
                                        item.CarsComingIn[i].Y++;
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].X--;
                                    }
                                    break;
                                case Direction.Straight:
                                    if (item.CarsComingIn[i].Y == item.StopPointsComingIn[i].Y)
                                    {
                                        if (i == 0)//is at border
                                        {
                                            if (false)
                                            {

                                            }
                                            else
                                            {
                                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                            }
                                        }
                                        else
                                        {
                                            if (item.CarsComingIn[i - 1] == null)
                                            {
                                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                                item.CarsComingIn[i - 1] = item.CarsComingIn[i];
                                                item.CarsComingIn[i] = null;
                                            }
                                            else
                                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        }
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Y++;
                                    }
                                    break;
                                case Direction.Right:
                                    if (item.CarsComingIn[i].X == 82)
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].Direction = Direction.Straight;
                                        item.CarsComingIn[i].Y++;
                                    }
                                    else
                                    {
                                        e.Graphics.FillEllipse(Brushes.Blue, item.CarsComingIn[i].X, item.CarsComingIn[i].Y, 5, 5);
                                        item.CarsComingIn[i].X++;
                                    }
                                    break;
                            }
                        }
                    }
                    break;
            }
        }

        foreach (var item in crossingTest.Feeders)
        {
            if (item != TrafficLightGreenFeeder)
            {
                if (item.CarsGoingOut[4] == null)
                {
                    for (int i = 0; i < item.TotalCars.Length; i++)
                    {
                        if (item.TotalCars[i] != null)
                        {
                            item.CarsGoingOut[4] = item.TotalCars[i];
                            item.TotalCars[i] = null;
                            break;
                        }
                    }
                }


                for (int i = 0; i < item.CarsGoingOut.Length; i++)
                {
                    if (item.CarsGoingOut[i] != null)
                    {
                        int pointToCheck = -1000;
                        int pointToCompare = -1000;

                        switch (item.FeederID)
                        {
                            case 1:
                                pointToCheck = item.CarsGoingOut[i].X;
                                pointToCompare = item.StopPointsGoingOut[i].X;
                                if (pointToCheck == 197)
                                {
                                    item.CarsGoingOut[i].X = -3;
                                    pointToCheck = -3;
                                }
                                break;
                            case 2:
                                pointToCheck = item.CarsGoingOut[i].Y;
                                pointToCompare = item.StopPointsGoingOut[i].Y;
                                break;
                            case 3:
                                pointToCheck = item.CarsGoingOut[i].X;
                                pointToCompare = item.StopPointsGoingOut[i].X;
                                break;
                            case 4:
                                pointToCheck = item.CarsGoingOut[i].Y;
                                pointToCompare = item.StopPointsGoingOut[i].Y;
                                break;
                        }

                        if (pointToCheck == pointToCompare)
                        {
                            if (i == 0)//if car is at stoplight
                            {
                                e.Graphics.FillEllipse(Brushes.Blue, item.CarsGoingOut[i].X, item.CarsGoingOut[i].Y, 5, 5);
                            }
                            else
                            {
                                if (item.CarsGoingOut[i - 1] == null)
                                {
                                    e.Graphics.FillEllipse(Brushes.Blue, item.CarsGoingOut[i].X, item.CarsGoingOut[i].Y, 5, 5);
                                    switch (item.FeederID)
                                    {
                                        case 1:
                                            item.CarsGoingOut[i].X++;
                                            break;
                                        case 2:
                                            item.CarsGoingOut[i].Y++;
                                            break;
                                        case 3:
                                            item.CarsGoingOut[i].X++;
                                            break;
                                        case 4:
                                            item.CarsGoingOut[i].Y++;
                                            break;
                                    }
                                    item.CarsGoingOut[i - 1] = item.CarsGoingOut[i];
                                    item.CarsGoingOut[i] = null;
                                    //insinsi
                                }
                                else
                                {
                                    e.Graphics.FillEllipse(Brushes.Blue, item.CarsGoingOut[i].X, item.CarsGoingOut[i].Y, 5, 5);
                                }
                            }
                        }
                        else
                        {
                            switch (item.FeederID)
                            {
                                case 1:
                                    e.Graphics.FillEllipse(Brushes.Blue, item.CarsGoingOut[i].X, item.CarsGoingOut[i].Y, 5, 5);
                                    item.CarsGoingOut[i].X++;
                                    break;
                                case 2:
                                    e.Graphics.FillEllipse(Brushes.Blue, item.CarsGoingOut[i].X, item.CarsGoingOut[i].Y, 5, 5);
                                    item.CarsGoingOut[i].Y++;
                                    break;
                                case 3:
                                    e.Graphics.FillEllipse(Brushes.Blue, item.CarsGoingOut[i].X, item.CarsGoingOut[i].Y, 5, 5);
                                    item.CarsGoingOut[i].X--;
                                    break;
                                case 4:
                                    e.Graphics.FillEllipse(Brushes.Blue, item.CarsGoingOut[i].X, item.CarsGoingOut[i].Y, 5, 5);
                                    item.CarsGoingOut[i].Y--; ;
                                    break;
                            }
                        }
                    }
                }
            }
        }
    }

    private void picbox_MouseMove(object sender, MouseEventArgs e)
    {
        simulation.label6.Text = "X = " + e.X + " and Y = " + e.Y;
    }

    private void LinkCrossingAndGridCell(GridCell gridCell, Image image)
    {
        if (image.Tag.ToString() == "CrossingB")
        {
            gridCell.AddCrossing(new CrossingB(gridCell.Number));
        }
        else
        {
            gridCell.AddCrossing(new CrossingA(gridCell.Number));
        }
    }

    public virtual void Save()
    {
        throw new System.NotImplementedException();
    }

}

