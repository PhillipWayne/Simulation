//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using EntryInformation;
using System.Drawing;


public class Simulator 
{
    public Grid grid;
    private Simulation simulation;

    public Simulator(Simulation simulation)
    {
        this.simulation = simulation;
        simulation.gridGroupBox.Enabled = false;
    }

    public void calculatePanelSize(int nrOfRows, int nrOfColumns)
    {
        int height = nrOfRows * 200;
        int width = nrOfColumns * 200;
        simulation.gridPanel.Size = new Size(width, height);
        simulation.gridGroupBox.Size = new Size(width + 15, height + 30);
    }

    public void DrawGrid()
    {

        grid = new Grid();
        simulation.gridPanel.Controls.Clear();
        simulation.gridGroupBox.Enabled = true;
        grid.nrOfRows = Convert.ToInt16(simulation.comboBoxRows.SelectedItem);
        grid.nrOfColumns = Convert.ToInt16(simulation.comboBoxColumns.SelectedItem);

        calculatePanelSize(grid.nrOfRows, grid.nrOfColumns);
        Pen myPen;
        myPen = new Pen(Color.White);
        Graphics formGraphics = simulation.gridPanel.CreateGraphics();

        //drawing cells rows
        foreach (var item in grid.ReturnGridCells())
        {
            formGraphics.DrawLine(myPen, item.ReturnLocation().X, item.ReturnLocation().Y, (item.ReturnLocation().X + 200), item.ReturnLocation().Y);//top line from the left to right
            formGraphics.DrawLine(myPen, item.ReturnLocation().X, item.ReturnLocation().Y, item.ReturnLocation().X, (item.ReturnLocation().Y + 200));//left line from top to bottom
            formGraphics.DrawLine(myPen, item.ReturnLocation().X, (item.ReturnLocation().Y + 199), (item.ReturnLocation().X + 200), item.ReturnLocation().Y + 199);//bottom line from the left to right
            formGraphics.DrawLine(myPen, (item.ReturnLocation().X + 199), item.ReturnLocation().Y, (item.ReturnLocation().X + 199), (item.ReturnLocation().Y + 200));//right line from top to bottom
        }

        myPen.Dispose();
        formGraphics.Dispose();
    }

    private GridCell determinePicboxLocation(Point droppedCoordinates)
    {
        List<GridCell> gridCells = grid.ReturnGridCells();

        if (grid.GridCellsOccupied() != 12)//if all cells are occupied
        {
            GridCell GridCellToBeDropped = null;

            List<GridCell> gridCellsUpdated = new List<GridCell>();//possible X coordinate cells candidates //change name to gridcellsUpdated

            foreach (var item in gridCells)
            {
                if ((droppedCoordinates.X >= item.ReturnLocation().X && droppedCoordinates.X <= (item.ReturnLocation().X + 200)) && item.Crossing == null)
                {
                    gridCellsUpdated.Add(item);
                }

            }
            foreach (var item in gridCellsUpdated)
            {
                if (droppedCoordinates.Y >= item.ReturnLocation().Y && droppedCoordinates.Y <= (item.ReturnLocation().Y + 200))
                {
                    GridCellToBeDropped = item;
                    break;
                }
            }

            if (GridCellToBeDropped != null)
                return GridCellToBeDropped;

            gridCellsUpdated = new List<GridCell>();
            GridCell cellOccupied = null;//which cell user dropped crossing is occupied
            List<GridCell> randomCellsToChoose = new List<GridCell>();//Possible cells to choose from

            foreach (var item in gridCells)//check if below you there are empty spots and check if is in cell
            {
                if ((droppedCoordinates.X >= item.ReturnLocation().X && droppedCoordinates.X <= (item.ReturnLocation().X + 200)) && item.Crossing != null)
                {
                    gridCellsUpdated.Add(item);
                }

            }

            foreach (var item in gridCellsUpdated)
            {
                if (droppedCoordinates.Y >= item.ReturnLocation().Y && droppedCoordinates.Y <= (item.ReturnLocation().Y + 200))
                {
                    cellOccupied = item;
                    break;
                }
            }

            foreach (var item in gridCells)//check if there is are emtpy spots
            {
                if (((cellOccupied.ReturnLocation().X + 200) == item.ReturnLocation().X && cellOccupied.ReturnLocation().Y == item.ReturnLocation().Y) && item.Crossing == null)
                {
                    randomCellsToChoose.Add(item);
                }
                else if (((cellOccupied.ReturnLocation().X - 200) == item.ReturnLocation().X && cellOccupied.ReturnLocation().Y == item.ReturnLocation().Y) && item.Crossing == null)
                {
                    randomCellsToChoose.Add(item);
                }
                else if (((cellOccupied.ReturnLocation().Y + 200) == item.ReturnLocation().Y && cellOccupied.ReturnLocation().X == item.ReturnLocation().X) && item.Crossing == null)
                {
                    randomCellsToChoose.Add(item);
                }
                else if (((cellOccupied.ReturnLocation().Y - 200) == item.ReturnLocation().Y && cellOccupied.ReturnLocation().X == item.ReturnLocation().X) && item.Crossing == null)
                {
                    randomCellsToChoose.Add(item);
                }
            }

            if (randomCellsToChoose.Count != 0)
            {
                Random random = new Random();

                int randomChoice = random.Next(0, randomCellsToChoose.Count);
                while (randomCellsToChoose[randomChoice] == null)
                {
                    randomChoice = random.Next(0, randomCellsToChoose.Count);
                }
                return randomCellsToChoose[randomChoice];
            }
        }

        return null;
    }

    public void LinkCrossingsWithNeighbors()
    {
        if (grid.CheckGridFull())
        {
            List<GridCell> gridCells = grid.ReturnGridCells();
            foreach (var item in gridCells)//check if there is are emtpy spots
            {
                foreach (var item2 in gridCells)
                {
                    if (((item.ReturnLocation().X + 200) == item2.ReturnLocation().X && item.ReturnLocation().Y == item2.ReturnLocation().Y))
                    {
                        item.Crossing.neighbors.Right = item2.Crossing;
                    }
                    else if (((item.ReturnLocation().X - 200) == item2.ReturnLocation().X && item.ReturnLocation().Y == item2.ReturnLocation().Y))
                    {
                        item.Crossing.neighbors.Left = item2.Crossing;
                    }
                    else if (((item.ReturnLocation().Y + 200) == item2.ReturnLocation().Y && item.ReturnLocation().X == item2.ReturnLocation().X))
                    {
                        item.Crossing.neighbors.Bottom = item2.Crossing;
                    }
                    else if (((item.ReturnLocation().Y - 200) == item2.ReturnLocation().Y && item.ReturnLocation().X == item2.ReturnLocation().X))
                    {
                        item.Crossing.neighbors.Top = item2.Crossing;
                    }
                }
            }
        }
        else
            throw new Exception("Grid is not full");
    }


    public bool AddCrossingInCell(DragEventArgs e)
    {
        GridCell OnGridCellDropped = determinePicboxLocation(simulation.gridPanel.PointToClient(new Point(e.X, e.Y)));
        if (OnGridCellDropped != null)
        {
            PictureBox picbox = new PictureBox();
            picbox.Click += new EventHandler(simulation.FormExpand);
            picbox.MouseMove += picbox_MouseMove;
            picbox.Size = new Size(200, 200);
            picbox.BorderStyle = BorderStyle.None;
            picbox.Name = Convert.ToString("Crossing" + OnGridCellDropped.Number);
            picbox.Location = new Point(OnGridCellDropped.ReturnLocation().X, OnGridCellDropped.ReturnLocation().Y);

            Bitmap image = (Bitmap)e.Data.GetData(DataFormats.Bitmap);
            picbox.Image = image;
            picbox.SizeMode = PictureBoxSizeMode.StretchImage;
            simulation.gridPanel.Controls.Add(picbox);
            LinkCrossingAndGridCell(OnGridCellDropped, image);
            return true;
        }
        else
            return false;
    }

    private void picbox_MouseMove(object sender, MouseEventArgs e)
    {
        simulation.label6.Text = "X = " + e.X + " and Y = " + e.Y;
    }

    private void LinkCrossingAndGridCell(GridCell gridCell, Image image)
    {
        if (image.Tag.ToString() == "CrossingB")
        {
            gridCell.AddCrossing(new CrossingB(gridCell.Number));
        }
        else
        {
            gridCell.AddCrossing(new CrossingA(gridCell.Number));
        }
    }

    

    public DateTime Time
    {
     
        set;
        get;
    }

    public virtual List<Car> CarsList
    {
        get;
        set;
    }

    public virtual Grid Grid
    {
        get;
        set;
    }

    public virtual Form Form
    {
        get;
        set;
    }

    public virtual IEnumerable<Car> Cars
    {
        get;
        set;
    }

    public virtual void Run()
    {
        throw new System.NotImplementedException();
    }

    public virtual void Save()
    {
        throw new System.NotImplementedException();
    }

}

