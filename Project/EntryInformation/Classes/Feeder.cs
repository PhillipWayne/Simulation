//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Drawing;
using EntryInformation.Classes;

public class Feeder
{
    public int FeederID { get; set; }
    public Crossing crossing { get; set; }
    public Car[] CarsGoingOut { get; set; }
    public Car[] CarsComingIn { get; set; }
    public Car[] TotalCars; //Total amount of cars specified at the beginning
    private Random random;
    private List<int> Percentages;

    public Direction ReturnDirection()
    {
        int randomNmr = random.Next(1, 101);

        bool found = StraightPercentageList.Contains(randomNmr);

        if (found)
            return Direction.Straight;

        found = RightPercentageList.Contains(randomNmr);

        if (found)
            return Direction.Right;

        return Direction.Left;
    }

    public int RightPercentage
    {
        get;
        set;
    }

    public int LeftPercentage
    {
        get;
        set;
    }

    public int StraightPercentage
    {
        get;
        set;
    }

	public List<int> RightPercentageList
	{
		get;
		set;
	}

	public List<int> LeftPercentageList
	{
		get;
		set;
	}

	public List<int> StraightPercentageList
	{
		get;
		set;
	}

	public TrafficLight TrafficLight
	{
		get;
		set;
	}

	public List<Point> StopPointsComingIn
	{
		get;
		set;
	}

    public List<Point> StopPointsGoingOut
    {
        get;
        set;
    }

    public Feeder(int feederID, Crossing crossing)
    {
        this.Percentages = new List<int>();
        this.random = new Random();
        this.FeederID = feederID;
        this.crossing = crossing;
        TotalCars = new Car[20];
        CarsComingIn = new Car[5];
        CarsGoingOut = new Car[5];

        LeftPercentage = 30;
        StraightPercentage = 40;
        RightPercentage = 30;

        LeftPercentageList = new List<int>();
        RightPercentageList = new List<int>();
        StraightPercentageList = new List<int>();

        for (int i = 1; i < 101; i++)
        {
            Percentages.Add(i);
        }

        while (StraightPercentageList.Count != StraightPercentage)
        {
            StraightPercentageList.Add(Percentages[0]);
            Percentages.RemoveAt(0);
        }

        while (LeftPercentageList.Count != LeftPercentage)
        {
            LeftPercentageList.Add(Percentages[0]);
            Percentages.RemoveAt(0);
        }

        while (RightPercentageList.Count != RightPercentage)
        {
            RightPercentageList.Add(Percentages[0]);
            Percentages.RemoveAt(0);
        }

        
        StopPointsComingIn = new List<Point>();
        StopPointsGoingOut = new List<Point>();

        TrafficLight = new TrafficLight(this.crossing, (feederID * 10), this.FeederID);

        switch (this.FeederID)
        {
            case 1:
                for (int i = 4; i > -1; i--)
                {
                    this.StopPointsGoingOut.Add(new Point(Convert.ToInt16(i + "7"), 112));
                }

                for (int i = 12; i < 53; i += 10)
                {
                    this.StopPointsComingIn.Add(new Point(i, 82));
                }
                if (crossing.CrossingID == 0 || crossing.CrossingID == 4)
                {
                    for (int i = 0; i < 20; i++)
                    {
                        TotalCars[i] = new Car(new Point(-3, 112));
                    }
                }
                break;
            case 2:
                for (int i = 4; i > -1; i--)
                {
                    this.StopPointsGoingOut.Add(new Point(82, Convert.ToInt16(i + "7")));
                }
                for (int i = 12; i < 53; i += 10)
                {
                    this.StopPointsComingIn.Add(new Point(112, Convert.ToInt16(i)));
                }
                if (crossing.CrossingID == 0 || crossing.CrossingID == 1)
                {
                    for (int i = 0; i < 10; i++)
                    {
                        TotalCars[i] = new Car(new Point(82, -3));
                    }
                }
                break;
            case 3:
                for (int i = 146; i < 187; i += 10)
                {
                    this.StopPointsGoingOut.Add(new Point(i, 82));
                }
                for (int i = 186; i > 145; i -= 10)
                {
                    this.StopPointsComingIn.Add(new Point(i, 112));
                }
                if (crossing.CrossingID == 1 || crossing.CrossingID == 5)
                {
                    for (int i = 0; i < 10; i++)
                    {
                        TotalCars[i] = new Car(new Point(199, 82));
                    }
                }
                break;
            case 4:
                for (int i = 146; i < 187; i += 10)
                {
                    this.StopPointsGoingOut.Add(new Point(112, i));
                }

                for (int i = 192; i > 151; i -= 10)
                {
                    this.StopPointsComingIn.Add(new Point(82, i));
                }
                if (crossing.CrossingID == 4 || crossing.CrossingID == 5)
                {
                    for (int i = 0; i < 10; i++)
                    {
                        TotalCars[i] = new Car(new Point(112, 199));
                    }
                }
                break;
        }
    }

	public virtual void AddDetailes()
	{
		throw new System.NotImplementedException();
	}

}

